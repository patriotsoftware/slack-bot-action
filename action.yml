name: "slack-bot-action"
description: "Sends custom message to person or channel of your choice"

inputs:
  destination:
    description: "Channel or user that will receive message."
    required: true
  message:
    description: "Message that will be sent."
    required: true
    default: "testing"
  slack-token:
    description: "Slack Token, can be stored as a secret in the repo."
    required: false
  results:
    description: "List of job results to append to the message. New line separated with:  job:result"
    required: false
  github-token:
    description: "GitHub Repository to for getting commit email. Use: secrets.GITHUB_TOKEN "
    required: false
  github-repository:
    description: "GitHub Repository to for getting commit email. Default: github.repository"
    required: false
  github-sha:
    description: "GitHub SHA to for getting commit email. Default: github.sha"
    required: false
  remove-branch-prefix:
    description: "Removes branch /refs/head/ from string instances of /refs/heads. Values: true/false"
    required: false
    default: "true"
  fallback-destination:
    description: "Destination to use if any of the destinations fail."
    required: false
    default: '#alerts-unknown-team'
outputs:
  validate-output:
    description: "Status of message"
    value: ${{ steps.run-slackbot.outputs.validate-output }}

# NOTE:
#   - single Patriot email or committer can be used as destination or fallback, not in conjuction

runs:
  using: composite
  steps:  
  - name: Checkout Code
    uses: actions/checkout@v4

  - name: get email from github trigger
    if: contains(inputs.destination, 'committer') || contains(inputs.fallback-destination, 'committer')
    id: gh_user_email
    continue-on-error: true
    uses: patriotsoftware/get-github-email-by-username-action@v1.25
    with:
      github-username: ${{ github.triggering_actor }}
      token: ${{ github.token }}

  - id: user
    shell: bash
    run: |
      if [[ "${{ steps.gh_user_email.outcome }}" == "success" ]]; then
        EMAIL="${{ steps.gh_user_email.outputs.email }}"
        echo "Committer: Using trigger actor $EMAIL found in API" 
      elif [[ "${{ github.event_name }}" != "workflow_dispatch" ]]; then 
        EMAIL="$(git log -n 1 --pretty=format:%ae)"
        echo "Committer: Using workflow dispatch $EMAIL email" 
      elif [[ ${{ contains(inputs.destination, '@patriotsoftware.com') }} ]]; then 
        EMAIL="${{ inputs.destination }}"
        echo "Patriot email as destination $EMAIL"
      elif [[ ${{ contains(inputs.fallback-destination, '@patriotsoftware.com') }} ]]; then 
        EMAIL="${{ inputs.fallback-destination }}"
        echo "Patriot email as fallback $EMAIL"  
      fi
      echo "email=$EMAIL" >> $GITHUB_OUTPUT

  - name: Find Slack user
    id: slack-user
    if: contains(steps.user.outputs.email, '@patriotsoftware.com')
    uses: scribd/find-slack-user-action@v1
    with:
      email: ${{ steps.user.outputs.email }}
      slack-token: ${{ inputs.slack-token }}

  - shell: bash
    id: parse_result
    env:
      INPUT_DESTINATION: ${{ inputs.destination }}
      INPUT_FALLBACK_DESTINATION: ${{ inputs.fallback-destination }}
      INPUT_MESSAGE: ${{ inputs.message }}
      INPUT_RESULTS: ${{ inputs.results }}
      USER_EMAIL: ${{ steps.user.outputs.email }}
      MEMBER_ID: ${{ steps.slack-user.outputs.member-id }}
    run: |
      echo "User Email: ${{ steps.user.outputs.email }}"
      echo "Slack member id: ${{ steps.slack-user.outputs.member-id }}"

      # Make the results look nice
      parsed_results=$(python ${{ github.action_path }}/parser.py "$INPUT_RESULTS")

      # github actions doesn't support just passing multiline strings between steps
      # so this needs to be formatted into the following
      EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
      echo "text<<$EOF" >> $GITHUB_OUTPUT
      echo "$INPUT_MESSAGE" >> $GITHUB_OUTPUT
      echo "$parsed_results" >> $GITHUB_OUTPUT
      echo "$EOF" >> $GITHUB_OUTPUT

      if [[ $INPUT_DESTINATION == "#"* ]]; then
        echo "Slack destination channel: $INPUT_DESTINATION"
        echo "destination=$INPUT_DESTINATION" >> $GITHUB_OUTPUT                    
      elif [[ $MEMBER_ID != "" ]]; then
        echo "Slack using member id: $MEMBER_ID"
        echo "destination=$MEMBER_ID" >> $GITHUB_OUTPUT      
      elif [[ $INPUT_FALLBACK_DESTINATION == "#"* ]]; then  
        echo "Slack fallback channel: $INPUT_FALLBACK_DESTINATION"
        echo "destination=$INPUT_FALLBACK_DESTINATION" >> $GITHUB_OUTPUT
      else
        echo "NO CONDITIONALS FOUND"
        echo "Destination: $INPUT_DESTINATION"
        echo "Fallback: $INPUT_FALLBACK_DESTINATION" 
      fi

  # - name: Post to a Slack channel
  #   id: slack
  #   uses: slackapi/slack-github-action@v1.27        
  #   env:
  #     SLACK_BOT_TOKEN: ${{ inputs.slack-token }}
  #   with:
  #     channel-id: "${{ steps.parse_result.outputs.destination }}"
  #     slack-message: "${{ steps.parse_result.outputs.text }}"
      
