name: "slack-bot-action"
description: "Sends custom message to person or channel of your choice"

inputs:
  destination:
    description: "Channel or user that will receive message."
    required: true
  message:
    description: "Message that will be sent."
    required: true
    default: "testing"
  slack-token:
    description: "Slack Token, can be stored as a secret in the repo."
    required: false
  results:
    description: "List of job results to append to the message. New line separated with:  job:result"
    required: false
  github-token:
    description: "GitHub Repository to for getting commit email. Use: secrets.GITHUB_TOKEN "
    required: false
  github-repository:
    description: "GitHub Repository to for getting commit email. Default: github.repository"
    required: false
  github-sha:
    description: "GitHub SHA to for getting commit email. Default: github.sha"
    required: false
  remove-branch-prefix:
    description: "Removes branch /refs/head/ from string instances of /refs/heads. Values: true/false"
    required: false
    default: "true"
  fallback-destination:
    description: "Destination to use if any of the destinations fail."
    required: false
    default: '#alerts-unknown-team'
outputs:
  validate-output:
    description: "Status of message"
    value: ${{ steps.run-slackbot.outputs.validate-output }}

runs:
  using: composite
  steps:  
      - name: Checkout Code
        uses: actions/checkout@v4

      #   # the slack github action doesn't support user emails directly
      #   # use this method to get the user's slack memberid from the email 
      #   # it uses the github email of the last commit to find this info
      - uses: octokit/request-action@v2.x
        id: get_commit_email
        with:
          route: GET /repos/${{ github.repository }}/commits/${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
      #  - run: |
      #        echo "First Test to get email ${{ fromJson(steps.get_commit_email.outputs.data).commit.committer.email }}" # doesn't work if change made inline & email not set          
      #        echo "Second Test to get email $(git log -n 1 --pretty=format:%ae)" # gets committer even on a trigger event
      #        echo "Third Test to get Email ${{ steps.get-email.outputs.email }}" # seems to work unless primary isn't set for patriot
      
      - name: get email from github trigger
        id: get-email-from-gh
        continue-on-error: true
        uses: patriotsoftware/get-github-email-by-username-action@v1.25
        with:
          github-username: ${{ github.triggering_actor }}

      - name: get email 
        id: get-email
        shell: bash
        if: steps.get-email-from-gh.outcome == 'success' 
        continue-on-error: true
        run: |
          echo "DESTINATION_EMAIL=${{ steps.get-email-from-gh.outputs.email }}" >> "$GITHUB_ENV"

      - shell: bash
        env:
          DESTINATION_EMAIL: "${{ steps.get-email-from-gh.outcome == 'success' && steps.get-email-from-gh.outputs.email || $(git log -n 1 --pretty=format:%ae) }}"
        run: |
             echo "First Test to get email ${{ fromJson(steps.get_commit_email.outputs.data).commit.committer.email }}" # doesn't work if change made inline & email not set          
             echo "Second Test to get email $(git log -n 1 --pretty=format:%ae)" # gets committer even on a trigger event
             echo "Third Test to get Email ${{ steps.get-email-from-gh.outputs.email }}" # seems to work unless primary isn't set for patriot
             echo "Fourth Test is ${{ env.DESTINATION_EMAIL }}"

      # - name: get email fallback
      #   id: get-email-fallback
      #   shell: bash
      #   # This will get committer, so don't want to use it if the workflow dispatch was used
      #   if: steps.get-email.outcome != 'success' && github.event_name != 'workflow_dispatch'
      #   continue-on-error: true
      #   run: |
          
      #     echo "DESTINATION_EMAIL=$(git log -n 1 --pretty=format:%ae)" >> "$GITHUB_ENV"
          
      # - name: Find Slack user
      #   id: find-slack-user
      #   if: steps.get-email.outcome == 'success' 
      #   uses: scribd/find-slack-user-action@v1
      #   with:
      #     email: ${{ env.DESTINATION_EMAIL }}
      #     slack-token: ${{ inputs.slack-token }}

      # - shell: bash
      #   id: parse_result
      #   env:
      #     INPUT_DESTINATION: ${{ inputs.destination }}
      #     INPUT_FALLBACK_DESTINATION: ${{ inputs.fallback-destination }}
      #     INPUT_MESSAGE: ${{ inputs.message }}
      #     INPUT_RESULTS: ${{ inputs.results }}
      #   run: |
      #     # Make the results look nice
      #     echo "Input Destination is $INPUT_DESTINATION"
      #     echo "Fallback Destination is $INPUT_FALLBACK_DESTINATION"
      #     echo "Email is ${{github.actor}}"
      #     echo "Member id is ${{ steps.find-slack-user.outputs.member-id }}"
      #     parsed_results=$(python ${{ github.action_path }}/parser.py "$INPUT_RESULTS")

      #     # github actions doesn't support just passing multiline strings between steps
      #     # so this needs to be formatted into the following
      #     EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
      #     echo "text<<$EOF" >> $GITHUB_OUTPUT
      #     echo "$INPUT_MESSAGE" >> $GITHUB_OUTPUT
      #     echo "$parsed_results" >> $GITHUB_OUTPUT
      #     echo "$EOF" >> $GITHUB_OUTPUT

      #     if [[ "$INPUT_DESTINATION" == "#"* ]]; then
      #       echo "Going to main destination channel"
      #       echo "destination=$INPUT_DESTINATION" >> "$GITHUB_OUTPUT"
      #     elif [[ "$INPUT_DESTINATION" == "committer" && "${{ env.DESTINATION_EMAIL }}" == *"@patriotsoftware.com" ]]; then
      #       echo "Going to main committer"
      #       echo "destination=${{ steps.find-slack-user.outputs.member-id }}" >> "$GITHUB_OUTPUT"
      #     elif [[ "$INPUT_FALLBACK_DESTINATION" == "committer" && "${{ env.DESTINATION_EMAIL }}" == *"@patriotsoftware.com" ]]; then  
      #       echo "Going to fallback committer"
      #       echo "destination=${{ steps.find-slack-user.outputs.member-id }}" >> "$GITHUB_OUTPUT"
      #     elif [[ "$INPUT_FALLBACK_DESTINATION" == "#"* ]]; then
      #       echo "Going to fallback channel"
      #       echo "destination=$INPUT_FALLBACK_DESTINATION" >> "$GITHUB_OUTPUT"
      #     else
      #       echo "NO CONDITIONALS FOUND"
      #       echo "Fallback is $INPUT_FALLBACK_DESTINATION"       
      #       echo "Input destination is $INPUT_DESTINATION"
      #     fi

      # - shell: bash
      #   run: |
      #     echo "Email is ${{ env.DESTINATION_EMAIL }}"
      #     echo "Member Id is ${{ steps.find-slack-user.outputs.member-id }}"
      #     echo "Destination is ${{ steps.parse_result.outputs.destination }}"

      # - name: Post to a Slack channel
      #   id: slack
      #   uses: slackapi/slack-github-action@v1.27        
      #   env:
      #     SLACK_BOT_TOKEN: ${{ inputs.slack-token }}
      #   with:
      #     channel-id: "${{ steps.parse_result.outputs.destination }}"
      #     slack-message: "${{ steps.parse_result.outputs.text }}"
          
