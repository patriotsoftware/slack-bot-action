name: "slack-bot-action"
description: "Sends custom message to person or channel of your choice"

inputs:
  destination:
    description: "Channel or user that will receive message."
    required: true
  message:
    description: "Message that will be sent."
    required: true
    default: "testing"
  slack-token:
    description: "Slack Token, can be stored as a secret in the repo."
    required: false
  results:
    description: "List of job results to append to the message. New line separated with:  job:result"
    required: false
  github-token:
    description: "GitHub Repository to for getting commit email. Use: secrets.GITHUB_TOKEN "
    required: false
  github-repository:
    description: "GitHub Repository to for getting commit email. Default: github.repository"
    required: false
  github-sha:
    description: "GitHub SHA to for getting commit email. Default: github.sha"
    required: false
  remove-branch-prefix:
    description: "Removes branch /refs/head/ from string instances of /refs/heads. Values: true/false"
    required: false
    default: "true"
  fallback-destination:
    description: "Destination to use if any of the destinations fail."
    required: false
    default: '#alerts-unknown-team'
outputs:
  validate-output:
    description: "Status of message"
    value: ${{ steps.run-slackbot.outputs.validate-output }}
runs:
  using: composite
  steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - shell: bash
        id: parse_result
        env:
          INPUT_DESTINATION: ${{ inputs.destination }}
          INPUT_FALLBACK-DESTINATION: ${{ inputs.fallback-destination }}
          INPUT_GITHUB-REPOSITORY: ${{ github.repository }}
          INPUT_GITHUB-SHA: ${{ github.sha }}
          INPUT_GITHUB-TOKEN: ${{ github.token }}
          INPUT_MESSAGE: ${{ inputs.message }}
          INPUT_REMOVE-BRANCH-PREFIX: ${{ inputs.remove-branch-prefix }}
          INPUT_RESULTS: ${{ inputs.results }}
          INPUT_SLACK-TOKEN: ${{ inputs.slack-token }}
        run: |
          parsed_results=$(python ${{ github.action_path }}/parser.py "$INPUT_RESULTS")
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "text<<$EOF" >> $GITHUB_OUTPUT
          echo "$parsed_results" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

          if [[ "$INPUT_DESTINATION" == "#"* ]]; then
            echo "destination=$INPUT_DESTINATION" >> $GITHUB_OUTPUT
          elif [[ "$INPUT_DESTINATION" == "committer" && "${{ github.event.pusher.email }}" == *"@patriotsoftware.com" ]]; then
            echo "destination=${{ github.event.pusher.email }}" >> $GITHUB_OUTPUT
          elif [[ "$INPUT_FALLBACK-DESTINATION" == "committer" && "${{ github.event.pusher.email }}" == *"@patriotsoftware.com" ]]; then  
            echo "destination=${{ github.event.pusher.email }}" >> $GITHUB_OUTPUT
          elif [[ "$INPUT_FALLBACK-DESTINATION" == "#"* ]]; then
            echo "destination=$INPUT_FALLBACK-DESTINATION" >> $GITHUB_OUTPUT
          fi

      - shell: bash
        run: |
          echo "${{ steps.parse_result.outputs.text }}"
          echo "${{ steps.parse_result.outputs.destination }}"

      - name: Find Slack user
        id: find-slack-user
        uses: scribd/find-slack-user-action@v1
        with:
          slack-token: ${{ inputs.slack-token }}

      - name: Print Slack user
        shell: bash
        run: |
          echo "${{ steps.find-slack-user.outputs.username }}"
          echo "${{ steps.find-slack-user.outputs.default-member-id }}"
          

      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.27.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
          channel-id: "${{ steps.find-slack-user.outputs.default-member-id }}"
          # For posting a simple plain text message
          slack-message: "$INPUT_MESSAGE\n${{ steps.parse_result.outputs.results }}" #"GitHub build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_BOT_TOKEN: ${{ inputs.slack-token }}

 # - name: Download Slackbot release
    #   uses: robinraju/release-downloader@v1
    #   with:
    #     repository: patriotsoftware/slack-bot-action
    #     latest: true
    #     fileName: slackbot


